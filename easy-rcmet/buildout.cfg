################################################################################
#
#   Copyright 2012 Apache Software Foundation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
################################################################################
#
# Buildout config for RCMET
#
# Author: Michael Joyce, michael.j.joyce@jpl.nasa.gov
#
################################################################################

[buildout]

extends = 
    etc/dependencies.cfg

unzip = true

versions = versions
#develop = ./src/main/python/rcmes

parts = 
    zlib
    jpeg
    libpng
    numpy
    numpy-build
    scipy
    scipy-build
    jasper
    g2clib
    g2clib-build
    pkg-config
    pkg-config-after
    pixman
    expat
    cairo
    fontconfig
    freetype
    hdf5
    netcdf
    numpy
    numpy-build
    scipy
    scipy-build
    matplotlib
    matplotlib-build
    pynio
    pynio-build
    ncl
    ncl-build

[zlib]
recipe            = hexagonit.recipe.cmmi
url               = ${external:zlibURL}
md5sum            = ${external:zlibMD5}
configure-options = 
    --prefix=/usr/local
make-target =
    all install

[libpng]
recipe            = hexagonit.recipe.cmmi
url               = ${external:libpngURL}
md5sum            = ${external:libpngMD5}
configure-options =
    --prefix=/usr/local
    --with-pic
make-target =
    all install

[jasper]
recipe            = hexagonit.recipe.cmmi
url               = ${external:jasperURL}
md5sum            = ${external:jasperMD5}
configure-options =
    --prefix=/usr/local
make-target =
    all install

[g2clib]
recipe = hexagonit.recipe.download
url    = ${external:g2clibURL}
md5sum = ${external:g2clibMD5}

[g2clib-build]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    cd ${g2clib:location}/g2clib-1.4.0
    make all
    cp libgrib2c.a /usr/local/lib
    cp grib2.h /usr/local/include

[pkg-config]
recipe            = hexagonit.recipe.cmmi
url               = ${external:pkg-configURL}
md5sum            = ${external:pkg-configMD5}
configure-options =
    --prefix=/usr/local
    --with-internal-glib
make-target =
    all install

[pkg-config-after]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    export LD_LIBRARY_PATH=/usr/local/cairo/lib
    export DYLD_LIBRARY_PATH=/usr/local/cairo/lib
    export PATH=/usr/local/bin:$PATH

# The configure options should be different if this isn't going to be run on OS X
# For Linux/Cygwin, set to --prefix=/usr/local
[pixman]
recipe            = hexagonit.recipe.cmmi
url               = ${external:pixmanURL}
md5sum            = ${external:pixmanMD5}
configure-options =
    --prefix=/usr/local
    --disable-openmp
    --disable-arm-iwmmxt
    --disable-dependency-tracking
make-target =
    all install

# This may not be needed, but is include for cairo integration
[expat]
recipe            = hexagonit.recipe.cmmi
url               = ${external:expatURL}
md5sum            = ${external:expatMD5}
configure-options =
    --prefix=/usr/local
make-target =
    all install

# pkg-config has to be on the PATH for this to work!
# If not running on OS X, remove 
[cairo]
recipe            = hexagonit.recipe.cmmi
url               = ${external:expatURL}
md5sum            = ${external:expatMD5}
configure-options =
    --prefix=/usr/local
    --enable-quartz-font=no
    --enable-quartz=no
    --enable-shared=no
    --enable-static=yes
make-target =
    all install

[fontconfig]
recipe            = hexagonit.recipe.cmmi
url               = ${external:fontconfigURL}
md5sum            = ${external:fontconfigMD5}
configure-options =
    --prefix=/usr/local
make-target =
    all install

[freetype]
recipe            = hexagonit.recipe.cmmi
url               = ${external:freetypeURL}
md5sum            = ${external:freetypeMD5}
configure-options =
    --prefix=/usr/local

[jpeg]
recipe            = hexagonit.recipe.cmmi
url               = ${external:jpegURL}
md5sum            = ${external:jpegMD5}
configure-options = 
    --prefix=/usr/local
make-target =
    all install
    install-lib
    install-headers

[szip]
recipe      = hexagonit.recipe.cmmi
url         = ${external:szipURL}
md5sum      = ${external:szipMD5}
make-target =
    all install

[libcurl]
recipe            = hexagonit.recipe.cmmi
url               = ${external:libcurlURL}
md5sum            = ${external:libcurlMD5}
configure-options =
    --bindir=${buildout:bin-directory}
    --with-zlib=${zlib:location}
make-target =
    all install

[hdf5]
recipe            = hexagonit.recipe.cmmi
url               = ${external:hdf5URL}
md5sum            = ${external:hdf5MD5}
configure-options = 
    --prefix=/usr/local
make-target = 
    all install

# Currently this is being installed without "classic" NetCDF-4 and OPeNDAP support.
# For additional config information, check
# http://www.ncl.ucar.edu/Download/build_from_src.shtml
[netcdf]
recipe         = hexagonit.recipe.cmmi
url            = ${external:netcdfURL}
md5sum         = ${external:netcdfMD5}
config-options =
    --disable-dap
make-target = check install 

[numpy]
recipe = hexagonit.recipe.download
url    = ${external:numpyURL}
md5sum = ${external:numpyMD5}

[numpy-build]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    cd ${numpy:location}
    ${buildout:directory}/bin/buildout setup numpy-1.6.2 install

[scipy]
recipe = hexagonit.recipe.download
url    = ${external:scipyURL}
md5sum = ${external:scipyMD5}

[scipy-build]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    cd ${scipy:location}
    ${buildout:directory}/bin/buildout setup scipy-0.11.0 install

[matplotlib]
recipe = hexagonit.recipe.download
url    = ${external:matplotlibURL}
md5sum = ${external:matplotlibMD5}

[matplotlib-build]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    cd ${matplotlib:location}/matplotlib
    python setup.py build
    python setup.py install

[ncl]
recipe = hexagonit.recipe.download
url    = ${external:nclURL}
md5sum = ${external:nclMD5}

[ncl-build]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    cd ${ncl:location}/ncl_ncarg-6.0.0-patched
    ./Configure -v
    make Everything

[pynio]
recipe = hexagonit.recipe.download
url    = ${external:pynioURL}
md5sum = ${external:pynioMD5}

[pynio-build]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    cd ${pynio:location}/PyNIO-1.4.1
    export HAS_GRIB2=1
    export HAS_OPENDAP=0
    export NETCDF_PREFIX=${netcdf:location}
    export GRIB2_PREFIX=/usr/local
    export F2CLIBS=gfortran
    export F2CLIBS_PREFIX=/usr/local/Cellar/gfortran/4.7.2/gfortran/lib
    python setup.py install

# This is a bit hacked around because buildout wouldn't cooperate and install the egg
# from PyPi (with zc.recipe.egg) so here we are...
[bottle]
recipe     = collective.recipe.cmd
on_install = true
on_update  = true
cmds       =
    pip install bottle

[versions]
numpy = 1.6.2
matplotlib = 1.1.0
